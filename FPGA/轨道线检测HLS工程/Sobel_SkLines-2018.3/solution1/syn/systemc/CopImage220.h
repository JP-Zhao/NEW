// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _CopImage220_HH_
#define _CopImage220_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct CopImage220 : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > src_data_stream_V_dout;
    sc_in< sc_logic > src_data_stream_V_empty_n;
    sc_out< sc_logic > src_data_stream_V_read;
    sc_out< sc_lv<8> > dst_data_stream_V_din;
    sc_in< sc_logic > dst_data_stream_V_full_n;
    sc_out< sc_logic > dst_data_stream_V_write;
    sc_in< sc_lv<32> > HEIGHT_dout;
    sc_in< sc_logic > HEIGHT_empty_n;
    sc_out< sc_logic > HEIGHT_read;
    sc_in< sc_lv<32> > WIDTH_dout;
    sc_in< sc_logic > WIDTH_empty_n;
    sc_out< sc_logic > WIDTH_read;


    // Module declarations
    CopImage220(sc_module_name name);
    SC_HAS_PROCESS(CopImage220);

    ~CopImage220();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > src_data_stream_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_i_160_fu_133_p2;
    sc_signal< sc_logic > dst_data_stream_V_blk_n;
    sc_signal< sc_lv<1> > tmp_121_i_fu_162_p2;
    sc_signal< sc_logic > HEIGHT_blk_n;
    sc_signal< sc_logic > WIDTH_blk_n;
    sc_signal< sc_lv<32> > HEIGHT_read_reg_167;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > WIDTH_read_reg_172;
    sc_signal< sc_lv<31> > i_fu_105_p2;
    sc_signal< sc_lv<31> > i_reg_180;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp1_fu_123_p2;
    sc_signal< sc_lv<1> > tmp1_reg_185;
    sc_signal< sc_lv<1> > tmp_i_fu_100_p2;
    sc_signal< sc_lv<31> > j_fu_138_p2;
    sc_signal< bool > ap_predicate_op37_write_state3;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<31> > i_i_reg_74;
    sc_signal< sc_lv<31> > j_i_reg_85;
    sc_signal< sc_lv<32> > i_cast_i_fu_96_p1;
    sc_signal< sc_lv<1> > tmp_115_i_fu_111_p2;
    sc_signal< sc_lv<1> > tmp_116_i_fu_117_p2;
    sc_signal< sc_lv<32> > j_cast_i_fu_129_p1;
    sc_signal< sc_lv<1> > tmp_119_i_fu_150_p2;
    sc_signal< sc_lv<1> > tmp_118_i_fu_144_p2;
    sc_signal< sc_lv<1> > tmp2_fu_156_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<31> ap_const_lv31_D7;
    static const sc_lv<31> ap_const_lv31_18C;
    static const sc_lv<31> ap_const_lv31_123;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_HEIGHT_blk_n();
    void thread_HEIGHT_read();
    void thread_WIDTH_blk_n();
    void thread_WIDTH_read();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_block_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op37_write_state3();
    void thread_ap_ready();
    void thread_dst_data_stream_V_blk_n();
    void thread_dst_data_stream_V_din();
    void thread_dst_data_stream_V_write();
    void thread_i_cast_i_fu_96_p1();
    void thread_i_fu_105_p2();
    void thread_j_cast_i_fu_129_p1();
    void thread_j_fu_138_p2();
    void thread_src_data_stream_V_blk_n();
    void thread_src_data_stream_V_read();
    void thread_tmp1_fu_123_p2();
    void thread_tmp2_fu_156_p2();
    void thread_tmp_115_i_fu_111_p2();
    void thread_tmp_116_i_fu_117_p2();
    void thread_tmp_118_i_fu_144_p2();
    void thread_tmp_119_i_fu_150_p2();
    void thread_tmp_121_i_fu_162_p2();
    void thread_tmp_i_160_fu_133_p2();
    void thread_tmp_i_fu_100_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
