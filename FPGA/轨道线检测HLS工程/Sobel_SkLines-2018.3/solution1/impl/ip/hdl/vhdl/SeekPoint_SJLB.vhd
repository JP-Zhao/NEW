-- ==============================================================
-- File generated on Sat Jun 04 16:23:53 +0800 2022
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity SeekPoint_SJLB_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of SeekPoint_SJLB_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111010100001001000110111011", 
    1 => "00111111011001111110000111111011", 
    2 => "00111110000000100000100011010101", 
    3 => "00111111011010011101001100000000", 
    4 => "00111111001000011110001001001100", 
    5 => "00111101110001111100001101000100", 
    6 => "00111110100011101001011101010010", 
    7 => "00111111000011000000000001101101", 
    8 => "00111111011101010001111100101011", 
    9 => "00111111011101110000001011101111", 
    10 => "00111110001000010110010101010011", 
    11 => "00111111011110000111100011000101", 
    12 => "00111111011101010000100011100101", 
    13 => "00111110111110001000001100101000", 
    14 => "00111111010011001101111100101110", 
    15 => "00111110000100010100101010100111", 
    16 => "00111110110101111111000100011000", 
    17 => "00111111011010100110110110100101", 
    18 => "00111111010010101100111000011001", 
    19 => "00111111011101011010000101001100", 
    20 => "00111111001001111101111010011111", 
    21 => "00111101000100100100011001101001", 
    22 => "00111111010110010110000010001010", 
    23 => "00111111011011110001101000101110", 
    24 => "00111111001011011100000110010110", 
    25 => "00111111010000011111101101000010", 
    26 => "00111111001111100011110111101110", 
    27 => "00111110110010001101000111111011", 
    28 => "00111111001001111100110101100110", 
    29 => "00111110001011110100101110010000", 
    30 => "00111111001101001011111101110000", 
    31 => "00111101000000100110001100101001", 
    32 => "00111110100011011100100011011001", 
    33 => "00111101001111010001111000110110", 
    34 => "00111101110001101110110100000111", 
    35 => "00111111010100101100111000100010", 
    36 => "00111111001100011110000001001010", 
    37 => "00111110101000100101101011011101", 
    38 => "00111111011100110100000111000001", 
    39 => "00111101000011010001011101010101", 
    40 => "00111110111000001010001100011010", 
    41 => "00111110110000110101101110100001", 
    42 => "00111111010000111111100011101001", 
    43 => "00111111010010111001001000111001", 
    44 => "00111110001111110101101110001000", 
    45 => "00111110111110101100001001100110", 
    46 => "00111110111001000010001111100000", 
    47 => "00111111001001010111010011000101", 
    48 => "00111111001101011001100011101111", 
    49 => "00111111010000010011001100100101", 
    50 => "00111110100011010101001100101001", 
    51 => "00111111001011100000000011111111", 
    52 => "00111111001001111011010010000001", 
    53 => "00111110001001101000001110110001", 
    54 => "00111101111100111011010100001110", 
    55 => "00111110111111110010100110010011", 
    56 => "00111111011101011011000111001000", 
    57 => "00111110101011100100011100001010", 
    58 => "00111111000101011101010000011011", 
    59 => "00111110011001010010111011110101", 
    60 => "00111111010000000101001100001010", 
    61 => "00111110100000101001101111010100", 
    62 => "00111111000000011000011001100111", 
    63 => "00111111001100101111011010110001", 
    64 => "00111111011001000001001000111100", 
    65 => "00111111011101011001010000011111", 
    66 => "00111111000011000001011001010001", 
    67 => "00111110000011011111001110010001", 
    68 => "00111110000110001110000010000111", 
    69 => "00111110100000111101100000011111", 
    70 => "00111111010101110011100100111111", 
    71 => "00111110100000100011000101000110", 
    72 => "00111111010100000111010011111000", 
    73 => "00111110011110010101111010011100", 
    74 => "00111111011011011110010000111001", 
    75 => "00111110101100110011000100010010", 
    76 => "00111110010010010101000001000100", 
    77 => "00111110100000001000111000010000", 
    78 => "00111111000111011011010100011011", 
    79 => "00111110111100100101001011101010", 
    80 => "00111110101101000000110010110111", 
    81 => "00111111010101001011000100101111", 
    82 => "00111111000101011101001111011110", 
    83 => "00111111000011001011101010110000", 
    84 => "00111111011010101100110100110100", 
    85 => "00111110100100100101100101111110", 
    86 => "00111111010000011101011111100000", 
    87 => "00111111010000001111010001100100", 
    88 => "00111110110000101100100111001100", 
    89 => "00111111000100010101110011000010", 
    90 => "00111101100110110101100101111110", 
    91 => "00111101010111001111101011001101", 
    92 => "00111111000001111110001001011001", 
    93 => "00111111010001110111011110000001", 
    94 => "00111111011011110001101101010011", 
    95 => "00111110000001010000011000100010", 
    96 => "00111111000100011001111001101101", 
    97 => "00111110111100000101001111111000", 
    98 => "00111100010000110000000011100110", 
    99 => "00111110101011001001101101010111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity SeekPoint_SJLB is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of SeekPoint_SJLB is
    component SeekPoint_SJLB_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    SeekPoint_SJLB_rom_U :  component SeekPoint_SJLB_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


