// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CopImage220 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_data_stream_V_dout,
        src_data_stream_V_empty_n,
        src_data_stream_V_read,
        dst_data_stream_V_din,
        dst_data_stream_V_full_n,
        dst_data_stream_V_write,
        HEIGHT_dout,
        HEIGHT_empty_n,
        HEIGHT_read,
        WIDTH_dout,
        WIDTH_empty_n,
        WIDTH_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] src_data_stream_V_dout;
input   src_data_stream_V_empty_n;
output   src_data_stream_V_read;
output  [7:0] dst_data_stream_V_din;
input   dst_data_stream_V_full_n;
output   dst_data_stream_V_write;
input  [31:0] HEIGHT_dout;
input   HEIGHT_empty_n;
output   HEIGHT_read;
input  [31:0] WIDTH_dout;
input   WIDTH_empty_n;
output   WIDTH_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_data_stream_V_read;
reg dst_data_stream_V_write;
reg HEIGHT_read;
reg WIDTH_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_data_stream_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_i_160_fu_133_p2;
reg    dst_data_stream_V_blk_n;
wire   [0:0] tmp_121_i_fu_162_p2;
reg    HEIGHT_blk_n;
reg    WIDTH_blk_n;
reg   [31:0] HEIGHT_read_reg_167;
reg    ap_block_state1;
reg   [31:0] WIDTH_read_reg_172;
wire   [30:0] i_fu_105_p2;
reg   [30:0] i_reg_180;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp1_fu_123_p2;
reg   [0:0] tmp1_reg_185;
wire   [0:0] tmp_i_fu_100_p2;
wire   [30:0] j_fu_138_p2;
reg    ap_predicate_op37_write_state3;
reg    ap_block_state3;
reg   [30:0] i_i_reg_74;
reg   [30:0] j_i_reg_85;
wire   [31:0] i_cast_i_fu_96_p1;
wire   [0:0] tmp_115_i_fu_111_p2;
wire   [0:0] tmp_116_i_fu_117_p2;
wire   [31:0] j_cast_i_fu_129_p1;
wire   [0:0] tmp_119_i_fu_150_p2;
wire   [0:0] tmp_118_i_fu_144_p2;
wire   [0:0] tmp2_fu_156_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_i_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op37_write_state3 == 1'b1)) | ((tmp_i_160_fu_133_p2 == 1'd1) & (src_data_stream_V_empty_n == 1'b0))) & (tmp_i_160_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_i_reg_74 <= i_reg_180;
    end else if ((~((ap_start == 1'b0) | (1'b0 == WIDTH_empty_n) | (1'b0 == HEIGHT_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_74 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_i_reg_85 <= 31'd0;
    end else if ((~(((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op37_write_state3 == 1'b1)) | ((tmp_i_160_fu_133_p2 == 1'd1) & (src_data_stream_V_empty_n == 1'b0))) & (tmp_i_160_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_i_reg_85 <= j_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == WIDTH_empty_n) | (1'b0 == HEIGHT_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HEIGHT_read_reg_167 <= HEIGHT_dout;
        WIDTH_read_reg_172 <= WIDTH_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_180 <= i_fu_105_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp1_reg_185 <= tmp1_fu_123_p2;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HEIGHT_blk_n = HEIGHT_empty_n;
    end else begin
        HEIGHT_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == WIDTH_empty_n) | (1'b0 == HEIGHT_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HEIGHT_read = 1'b1;
    end else begin
        HEIGHT_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        WIDTH_blk_n = WIDTH_empty_n;
    end else begin
        WIDTH_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == WIDTH_empty_n) | (1'b0 == HEIGHT_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        WIDTH_read = 1'b1;
    end else begin
        WIDTH_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_121_i_fu_162_p2 == 1'd1) & (tmp_i_160_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        dst_data_stream_V_blk_n = dst_data_stream_V_full_n;
    end else begin
        dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op37_write_state3 == 1'b1)) | ((tmp_i_160_fu_133_p2 == 1'd1) & (src_data_stream_V_empty_n == 1'b0))) & (ap_predicate_op37_write_state3 == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        dst_data_stream_V_write = 1'b1;
    end else begin
        dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_160_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_V_blk_n = src_data_stream_V_empty_n;
    end else begin
        src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op37_write_state3 == 1'b1)) | ((tmp_i_160_fu_133_p2 == 1'd1) & (src_data_stream_V_empty_n == 1'b0))) & (tmp_i_160_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_data_stream_V_read = 1'b1;
    end else begin
        src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == WIDTH_empty_n) | (1'b0 == HEIGHT_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_i_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op37_write_state3 == 1'b1)) | ((tmp_i_160_fu_133_p2 == 1'd1) & (src_data_stream_V_empty_n == 1'b0))) & (tmp_i_160_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op37_write_state3 == 1'b1)) | ((tmp_i_160_fu_133_p2 == 1'd1) & (src_data_stream_V_empty_n == 1'b0))) & (tmp_i_160_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == WIDTH_empty_n) | (1'b0 == HEIGHT_empty_n) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = (((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op37_write_state3 == 1'b1)) | ((tmp_i_160_fu_133_p2 == 1'd1) & (src_data_stream_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_predicate_op37_write_state3 = ((tmp_121_i_fu_162_p2 == 1'd1) & (tmp_i_160_fu_133_p2 == 1'd1));
end

assign dst_data_stream_V_din = src_data_stream_V_dout;

assign i_cast_i_fu_96_p1 = i_i_reg_74;

assign i_fu_105_p2 = (i_i_reg_74 + 31'd1);

assign j_cast_i_fu_129_p1 = j_i_reg_85;

assign j_fu_138_p2 = (j_i_reg_85 + 31'd1);

assign tmp1_fu_123_p2 = (tmp_116_i_fu_117_p2 & tmp_115_i_fu_111_p2);

assign tmp2_fu_156_p2 = (tmp_119_i_fu_150_p2 & tmp_118_i_fu_144_p2);

assign tmp_115_i_fu_111_p2 = ((i_i_reg_74 > 31'd215) ? 1'b1 : 1'b0);

assign tmp_116_i_fu_117_p2 = ((i_i_reg_74 < 31'd396) ? 1'b1 : 1'b0);

assign tmp_118_i_fu_144_p2 = ((j_i_reg_85 != 31'd0) ? 1'b1 : 1'b0);

assign tmp_119_i_fu_150_p2 = ((j_i_reg_85 < 31'd291) ? 1'b1 : 1'b0);

assign tmp_121_i_fu_162_p2 = (tmp2_fu_156_p2 & tmp1_reg_185);

assign tmp_i_160_fu_133_p2 = (($signed(j_cast_i_fu_129_p1) < $signed(WIDTH_read_reg_172)) ? 1'b1 : 1'b0);

assign tmp_i_fu_100_p2 = (($signed(i_cast_i_fu_96_p1) < $signed(HEIGHT_read_reg_167)) ? 1'b1 : 1'b0);

endmodule //CopImage220
