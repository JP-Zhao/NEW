// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module OvlayImage223 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        src_data_stream_V_dout,
        src_data_stream_V_empty_n,
        src_data_stream_V_read,
        ovlaysrc_data_stream_V_dout,
        ovlaysrc_data_stream_V_empty_n,
        ovlaysrc_data_stream_V_read,
        dst_data_stream_V_din,
        dst_data_stream_V_full_n,
        dst_data_stream_V_write,
        StartLoc_address0,
        StartLoc_ce0,
        StartLoc_q0,
        StartLoc_address1,
        StartLoc_ce1,
        StartLoc_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] src_data_stream_V_dout;
input   src_data_stream_V_empty_n;
output   src_data_stream_V_read;
input  [7:0] ovlaysrc_data_stream_V_dout;
input   ovlaysrc_data_stream_V_empty_n;
output   ovlaysrc_data_stream_V_read;
output  [7:0] dst_data_stream_V_din;
input   dst_data_stream_V_full_n;
output   dst_data_stream_V_write;
output  [0:0] StartLoc_address0;
output   StartLoc_ce0;
input  [0:0] StartLoc_q0;
output  [0:0] StartLoc_address1;
output   StartLoc_ce1;
input  [0:0] StartLoc_q1;

reg ap_done;
reg ap_idle;
reg start_write;
reg src_data_stream_V_read;
reg ovlaysrc_data_stream_V_read;
reg[7:0] dst_data_stream_V_din;
reg dst_data_stream_V_write;
reg StartLoc_ce0;
reg StartLoc_ce1;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    src_data_stream_V_blk_n;
wire    ap_CS_fsm_state4;
reg    ovlaysrc_data_stream_V_blk_n;
wire   [0:0] tmp_60_fu_232_p2;
reg    dst_data_stream_V_blk_n;
wire   [0:0] tmp_61_fu_238_p2;
reg    ap_block_state1;
wire   [7:0] i_8_fu_142_p2;
reg   [7:0] i_8_reg_257;
wire    ap_CS_fsm_state2;
wire   [8:0] j_5_fu_154_p2;
reg   [8:0] j_5_reg_265;
wire    ap_CS_fsm_state3;
reg   [7:0] i_reg_112;
wire   [0:0] exitcond_fu_148_p2;
reg   [8:0] j_reg_124;
reg    ap_predicate_op59_write_state4;
reg    ap_predicate_op62_write_state4;
reg    ap_block_state4;
wire   [0:0] exitcond2_fu_136_p2;
wire   [7:0] extLd26_cast_cast3_fu_160_p1;
wire   [0:0] ult_fu_164_p2;
wire   [7:0] tmp_s_fu_176_p3;
wire   [8:0] extLd_cast2_cast_fu_190_p1;
wire   [0:0] ult2_fu_194_p2;
wire   [8:0] tmp_58_fu_206_p3;
wire   [0:0] rev_fu_170_p2;
wire   [0:0] tmp_57_fu_184_p2;
wire   [0:0] tmp_59_fu_214_p2;
wire   [0:0] rev2_fu_200_p2;
wire   [0:0] tmp2_fu_226_p2;
wire   [0:0] tmp1_fu_220_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond2_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_112 <= i_8_reg_257;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_112 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_124 <= 9'd0;
    end else if ((~((src_data_stream_V_empty_n == 1'b0) | ((tmp_60_fu_232_p2 == 1'd0) & (dst_data_stream_V_full_n == 1'b0)) | ((tmp_60_fu_232_p2 == 1'd1) & (ovlaysrc_data_stream_V_empty_n == 1'b0)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op62_write_state4 == 1'b1)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op59_write_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_124 <= j_5_reg_265;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_8_reg_257 <= i_8_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_5_reg_265 <= j_5_fu_154_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        StartLoc_ce0 = 1'b1;
    end else begin
        StartLoc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        StartLoc_ce1 = 1'b1;
    end else begin
        StartLoc_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_60_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((tmp_61_fu_238_p2 == 1'd1) & (tmp_60_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((tmp_61_fu_238_p2 == 1'd0) & (tmp_60_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        dst_data_stream_V_blk_n = dst_data_stream_V_full_n;
    end else begin
        dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((src_data_stream_V_empty_n == 1'b0) | ((tmp_60_fu_232_p2 == 1'd0) & (dst_data_stream_V_full_n == 1'b0)) | ((tmp_60_fu_232_p2 == 1'd1) & (ovlaysrc_data_stream_V_empty_n == 1'b0)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op62_write_state4 == 1'b1)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op59_write_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op62_write_state4 == 1'b1))) begin
        dst_data_stream_V_din = 8'd0;
    end else if (((~((src_data_stream_V_empty_n == 1'b0) | ((tmp_60_fu_232_p2 == 1'd0) & (dst_data_stream_V_full_n == 1'b0)) | ((tmp_60_fu_232_p2 == 1'd1) & (ovlaysrc_data_stream_V_empty_n == 1'b0)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op62_write_state4 == 1'b1)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op59_write_state4 == 1'b1))) & (tmp_60_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~((src_data_stream_V_empty_n == 1'b0) | ((tmp_60_fu_232_p2 == 1'd0) & (dst_data_stream_V_full_n == 1'b0)) | ((tmp_60_fu_232_p2 == 1'd1) & (ovlaysrc_data_stream_V_empty_n == 1'b0)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op62_write_state4 == 1'b1)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op59_write_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op59_write_state4 == 1'b1)))) begin
        dst_data_stream_V_din = src_data_stream_V_dout;
    end else begin
        dst_data_stream_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~((src_data_stream_V_empty_n == 1'b0) | ((tmp_60_fu_232_p2 == 1'd0) & (dst_data_stream_V_full_n == 1'b0)) | ((tmp_60_fu_232_p2 == 1'd1) & (ovlaysrc_data_stream_V_empty_n == 1'b0)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op62_write_state4 == 1'b1)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op59_write_state4 == 1'b1))) & (tmp_60_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~((src_data_stream_V_empty_n == 1'b0) | ((tmp_60_fu_232_p2 == 1'd0) & (dst_data_stream_V_full_n == 1'b0)) | ((tmp_60_fu_232_p2 == 1'd1) & (ovlaysrc_data_stream_V_empty_n == 1'b0)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op62_write_state4 == 1'b1)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op59_write_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op62_write_state4 == 1'b1)) | (~((src_data_stream_V_empty_n == 1'b0) | ((tmp_60_fu_232_p2 == 1'd0) & (dst_data_stream_V_full_n == 1'b0)) | ((tmp_60_fu_232_p2 == 1'd1) & (ovlaysrc_data_stream_V_empty_n == 1'b0)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op62_write_state4 == 1'b1)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op59_write_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op59_write_state4 == 1'b1)))) begin
        dst_data_stream_V_write = 1'b1;
    end else begin
        dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_60_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ovlaysrc_data_stream_V_blk_n = ovlaysrc_data_stream_V_empty_n;
    end else begin
        ovlaysrc_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((src_data_stream_V_empty_n == 1'b0) | ((tmp_60_fu_232_p2 == 1'd0) & (dst_data_stream_V_full_n == 1'b0)) | ((tmp_60_fu_232_p2 == 1'd1) & (ovlaysrc_data_stream_V_empty_n == 1'b0)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op62_write_state4 == 1'b1)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op59_write_state4 == 1'b1))) & (tmp_60_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ovlaysrc_data_stream_V_read = 1'b1;
    end else begin
        ovlaysrc_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        src_data_stream_V_blk_n = src_data_stream_V_empty_n;
    end else begin
        src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((src_data_stream_V_empty_n == 1'b0) | ((tmp_60_fu_232_p2 == 1'd0) & (dst_data_stream_V_full_n == 1'b0)) | ((tmp_60_fu_232_p2 == 1'd1) & (ovlaysrc_data_stream_V_empty_n == 1'b0)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op62_write_state4 == 1'b1)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op59_write_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4))) begin
        src_data_stream_V_read = 1'b1;
    end else begin
        src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((src_data_stream_V_empty_n == 1'b0) | ((tmp_60_fu_232_p2 == 1'd0) & (dst_data_stream_V_full_n == 1'b0)) | ((tmp_60_fu_232_p2 == 1'd1) & (ovlaysrc_data_stream_V_empty_n == 1'b0)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op62_write_state4 == 1'b1)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op59_write_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign StartLoc_address0 = 64'd0;

assign StartLoc_address1 = 64'd1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4 = ((src_data_stream_V_empty_n == 1'b0) | ((tmp_60_fu_232_p2 == 1'd0) & (dst_data_stream_V_full_n == 1'b0)) | ((tmp_60_fu_232_p2 == 1'd1) & (ovlaysrc_data_stream_V_empty_n == 1'b0)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op62_write_state4 == 1'b1)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_predicate_op59_write_state4 == 1'b1)));
end

always @ (*) begin
    ap_predicate_op59_write_state4 = ((tmp_61_fu_238_p2 == 1'd0) & (tmp_60_fu_232_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op62_write_state4 = ((tmp_61_fu_238_p2 == 1'd1) & (tmp_60_fu_232_p2 == 1'd1));
end

assign ap_ready = internal_ap_ready;

assign exitcond2_fu_136_p2 = ((i_reg_112 == 8'd180) ? 1'b1 : 1'b0);

assign exitcond_fu_148_p2 = ((j_reg_124 == 9'd290) ? 1'b1 : 1'b0);

assign extLd26_cast_cast3_fu_160_p1 = StartLoc_q0;

assign extLd_cast2_cast_fu_190_p1 = StartLoc_q1;

assign i_8_fu_142_p2 = (i_reg_112 + 8'd1);

assign j_5_fu_154_p2 = (j_reg_124 + 9'd1);

assign rev2_fu_200_p2 = (ult2_fu_194_p2 ^ 1'd1);

assign rev_fu_170_p2 = (ult_fu_164_p2 ^ 1'd1);

assign start_out = real_start;

assign tmp1_fu_220_p2 = (tmp_57_fu_184_p2 & rev_fu_170_p2);

assign tmp2_fu_226_p2 = (tmp_59_fu_214_p2 & rev2_fu_200_p2);

assign tmp_57_fu_184_p2 = ((i_reg_112 < tmp_s_fu_176_p3) ? 1'b1 : 1'b0);

assign tmp_58_fu_206_p3 = {{8'd145}, {StartLoc_q1}};

assign tmp_59_fu_214_p2 = ((j_reg_124 < tmp_58_fu_206_p3) ? 1'b1 : 1'b0);

assign tmp_60_fu_232_p2 = (tmp2_fu_226_p2 & tmp1_fu_220_p2);

assign tmp_61_fu_238_p2 = ((ovlaysrc_data_stream_V_dout == 8'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_176_p3 = {{7'd90}, {StartLoc_q0}};

assign ult2_fu_194_p2 = ((j_reg_124 < extLd_cast2_cast_fu_190_p1) ? 1'b1 : 1'b0);

assign ult_fu_164_p2 = ((i_reg_112 < extLd26_cast_cast3_fu_160_p1) ? 1'b1 : 1'b0);

endmodule //OvlayImage223
