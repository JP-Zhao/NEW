// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_memset_SobOvlyI (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        SobOvlyIma_Strt_address0,
        SobOvlyIma_Strt_ce0,
        SobOvlyIma_Strt_we0,
        SobOvlyIma_Strt_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [0:0] SobOvlyIma_Strt_address0;
output   SobOvlyIma_Strt_ce0;
output   SobOvlyIma_Strt_we0;
output  [0:0] SobOvlyIma_Strt_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg SobOvlyIma_Strt_ce0;
reg SobOvlyIma_Strt_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] indvarinc_i_fu_46_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] ap_phi_mux_invdar_i_phi_fu_34_p4;
reg   [0:0] invdar_i_reg_30;
reg    ap_block_state1;
wire   [63:0] tmp_i_fu_41_p1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_phi_mux_invdar_i_phi_fu_34_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_invdar_i_phi_fu_34_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        invdar_i_reg_30 <= indvarinc_i_fu_46_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        invdar_i_reg_30 <= 1'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SobOvlyIma_Strt_ce0 = 1'b1;
    end else begin
        SobOvlyIma_Strt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SobOvlyIma_Strt_we0 = 1'b1;
    end else begin
        SobOvlyIma_Strt_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_phi_mux_invdar_i_phi_fu_34_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_phi_mux_invdar_i_phi_fu_34_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_phi_mux_invdar_i_phi_fu_34_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SobOvlyIma_Strt_address0 = tmp_i_fu_41_p1;

assign SobOvlyIma_Strt_d0 = 1'd0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_phi_mux_invdar_i_phi_fu_34_p4 = invdar_i_reg_30;

assign indvarinc_i_fu_46_p2 = (invdar_i_reg_30 ^ 1'd1);

assign tmp_i_fu_41_p1 = invdar_i_reg_30;

endmodule //Loop_memset_SobOvlyI
