// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _CopImage224_HH_
#define _CopImage224_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct CopImage224 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<8> > src_data_stream_V_dout;
    sc_in< sc_logic > src_data_stream_V_empty_n;
    sc_out< sc_logic > src_data_stream_V_read;
    sc_out< sc_lv<8> > dst_data_stream_V_din;
    sc_in< sc_logic > dst_data_stream_V_full_n;
    sc_out< sc_logic > dst_data_stream_V_write;


    // Module declarations
    CopImage224(sc_module_name name);
    SC_HAS_PROCESS(CopImage224);

    ~CopImage224();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > src_data_stream_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond_fu_98_p2;
    sc_signal< sc_logic > dst_data_stream_V_blk_n;
    sc_signal< sc_lv<1> > tmp_s_fu_110_p2;
    sc_signal< sc_lv<8> > i_9_fu_92_p2;
    sc_signal< sc_lv<8> > i_9_reg_119;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<9> > j_8_fu_104_p2;
    sc_signal< bool > ap_predicate_op27_write_state3;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<8> > i_reg_64;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<9> > j_reg_75;
    sc_signal< sc_lv<1> > exitcond1_fu_86_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<8> ap_const_lv8_B4;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<9> ap_const_lv9_122;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<9> ap_const_lv9_10E;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_block_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op27_write_state3();
    void thread_ap_ready();
    void thread_dst_data_stream_V_blk_n();
    void thread_dst_data_stream_V_din();
    void thread_dst_data_stream_V_write();
    void thread_exitcond1_fu_86_p2();
    void thread_exitcond_fu_98_p2();
    void thread_i_9_fu_92_p2();
    void thread_internal_ap_ready();
    void thread_j_8_fu_104_p2();
    void thread_real_start();
    void thread_src_data_stream_V_blk_n();
    void thread_src_data_stream_V_read();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_s_fu_110_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
