// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ListDelete_HH_
#define _ListDelete_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct ListDelete : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<13> > Data_address0;
    sc_out< sc_logic > Data_ce0;
    sc_out< sc_logic > Data_we0;
    sc_out< sc_lv<32> > Data_d0;
    sc_in< sc_lv<32> > Data_q0;
    sc_in< sc_lv<32> > i;
    sc_in< sc_lv<32> > length_r;


    // Module declarations
    ListDelete(sc_module_name name);
    SC_HAS_PROCESS(ListDelete);

    ~ListDelete();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > or_cond_fu_70_p2;
    sc_signal< sc_lv<1> > or_cond_reg_113;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_69_fu_76_p2;
    sc_signal< sc_lv<32> > j_7_fu_97_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > j_reg_48;
    sc_signal< sc_lv<64> > tmp_70_fu_81_p1;
    sc_signal< sc_lv<64> > tmp_72_fu_92_p1;
    sc_signal< sc_lv<1> > tmp_fu_58_p2;
    sc_signal< sc_lv<1> > tmp_s_fu_64_p2;
    sc_signal< sc_lv<32> > tmp_71_fu_86_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Data_address0();
    void thread_Data_ce0();
    void thread_Data_d0();
    void thread_Data_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_j_7_fu_97_p2();
    void thread_or_cond_fu_70_p2();
    void thread_tmp_69_fu_76_p2();
    void thread_tmp_70_fu_81_p1();
    void thread_tmp_71_fu_86_p2();
    void thread_tmp_72_fu_92_p1();
    void thread_tmp_fu_58_p2();
    void thread_tmp_s_fu_64_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
