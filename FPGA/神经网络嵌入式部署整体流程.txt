神经网络嵌入式部署整体流程：
1.软硬件环境准备：
    (1)软件环境准备：
        a.ubuntu安装及环境配置
            可以选择直接安装ubuntu系统或采用虚拟机安装,安装版本要求为18.04或20.04等vitis支持的版本
            要求设备硬件满足需求,虚拟机配置时,核心数尽可能多,内存32GB及以上,越多越好
            如本机配置为:CPU:AMD 5950X,内存条:海盗船32G*2 DDR4 3600MHz,固态:三星980RPO 2T.
            系统安装完成后，需更换为国内的源， 并设置共享文件夹,否则空间可能不够安装使用.
        b.硬件平台相关软件安装:
            vitis套件安装:
                需安装相应版本的vitis组合软件包,包括vitis,vivado,HLS,Model composer等
                本机安装版本为vitis2021.2版本
            petalinux安装:
                petalinux安装版本需与vitis版本一致
                安装过程中会有环境检查,需要根据要求安装相应的软件包,并将编译环境设置为bash
            SDK交叉编译链安装:
                SDK在petalinux安装时会安装一个版本,但是,由于vitis套件与petalinux版本迭代不一致,导致两边编译环境可能出现版本不对应的情况
                因此,需要额外安装单独的SDK交叉编译链,该安装脚本可以在xilinx提供的common image中找到
            sstate-cache安装:
                这是在petalinux编译过程中需要的离线编译包,在petalinux中编译时默认是从xilinx官网下载相应的文件
                导致每次编译耗时较久,因此下载该离线编译包,可以节省很多时间
            common image安装:
                vitis编译时所需的各种头文件及库函数,需要安装才能完成vitis的编译过程
            注:安装完成后需在source里配置相应的环境变量
        c.Vitis AI及相关环境安装:    
            python安装:
                需安装python2及python3的pip,并下载cmake,建立基本的软件编译环境
            docker安装:
                vitsi ai是通过docker发布的,因此需要首先安装docker
                并配置基本的设置,如改变用户组权限等
            vitsi ai安装:
                vitis ai通过在docker环境中用指令下载安装,分为cpu docker及gpu docker
                官方推荐使用gup docker以获得加速,但虚拟机安装CPU docker需要设置GPU直通
                如直接安装ubuntu系统,则可以直接安装gpu docker,安装前需安装nvidia-container-runtime并修改相应配置文件
                之后按照xilinx提供的步骤安装相应的docker
        d.网络训练的环境及相应软件安装
            Anaconda安装:
                Anaconda提供了一个相对简单的神经网络环境配置的工具,可以快速部署和切换网络环境
            数据集标注软件labelme安装
                通过conda安装,需要改写json_to_dataset脚本,实现数据标注可视化
    (2) 硬件环境准备：
        zcu104开发板是通过SD卡启动的方式进行工作的,因此需要编译包含DPU的SD卡镜像文件
        a.vivado工程
            vivado中主要设置PS端部分,包括zynq mpsoc内核,及相应的时钟,终端配置,以及设置好给DPU预留的AXI总线等
            编译完成后,会生成.xsa文件,该文件中包含编译成功的bitstream,为后续软件编译提供基础硬件描述
        b.petalinux工程
            petalinux主要负责根据生成的vivado镜像,将所需的一些必要的包,及各种设置配置好,打包成一个linux系统
            将vivado编译好的.xsa文件导入petalinux中,petalinux将根据该硬件描述创建相应的petalinux工程
            设置petalinux:
                配置本地编译环境
                设置文件系统为SD卡第二分区
                设置MACHINE_NAME为zcu104的名字,petalinux里有预设好的zcu104配置,不用更改,其余非官方板子需要自己设置配置
                配置相应的用户软件包,包括vitis ai等都是在这里配置完成的
                配置设备树      
            编译工程,编译成功后,会生成linux所需的一些文件,如uboot.elf等以及SD卡启动所需的一些文件,如boot.src
        c.vitis 工程
            vitis主要负责将DPU这个软核IP封装进原本的vivado工程中,并根据petalinux生成的linux系统生成SD卡镜像
            首先根据vivado生成的xsa文件生成硬件平台,编译通过后,加入上层应用DPU
            配置DPU,如是否启用URAM,及DPU大小设置,zcu104共支持DPU4096*2,可以设置为多个DPU512,以此来实现不同性能的DPU设置
            编译成功后,会生成SD卡镜像,烧录完成后,硬件平台搭建完成
2.准备可运行的模型(XXX.model，XXX.prototxt)
(因为目前没有太弄清楚怎么做，所以这部分写的比较少，但这部分才是重中之重，隐含了好多步骤)
    (1)部署前准备：
        部署之前，需准备好一个符合自己需求的网络
            如本研究的目的是初步部署一个铁轨区域的语义分割加火车轨道检测的神经网络
                初步选择的是segematation经典语义分割网络，采取resnet18为主体架构
            xilinx在Vitis AI Zoo中提供了大量的浮点型的网络源码
        在符合要求的程序中，更改神经网络结构，调试程序，使之满足需求
        制作相应的数据集
        开始训练，并验证网络性能
    (2)模型准备：
        根据vitis ai 的用户手册编写vitis ai的剪枝，优化程序脚本,对网络进行初步缩减
        针对优化好的网络，编写评估脚本,得到经过vitis ai优化后的网络性能表现,与原网络进行对比
        编写量化脚本，将32位浮点型模型转换为8位定点模型
        用评估脚本再评估一次，比较转换为8位定点数之后的网络表现，判断精度损失
        编写编译脚本，将转换出来的8位定点模型编译成DPU可以识别的.xmodel文件，及相应的prototxt文件
3.应用程序编写：
    到这一步，PL端部分准备完毕，开始编写PS端给ARM用的执行程序
    ARM端主要负责整个应用过程中数据流的前处理，DPU资源的调配，以及对DPU处理完的数据进行后处理，以及最后的输出
    需要编写板子可以运行的应用程序，来负责指挥ARM端需要完成的工作，
    如本研究过程中，需要实现铁轨区域语义分割和火车轨道检测，应用程序需要干一些事情
        如设置视频输入路径，或者设置为摄像头输入，将采集进来的图像进行简单的前处理，如resize，
        之后将处理过的数据送入DPU，由DPU根据训练好的.xmodel文件,对数据进行分析和训练
        再由程序将DPU输出的网络预测结果转换为视频或者图片的格式，送至HDMI接口或者采取视频推流的方式显示

至此，整个神经网络部署完成。    



