-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filtrel_kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_V_empty_n : IN STD_LOGIC;
    src_data_stream_V_read : OUT STD_LOGIC;
    dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_V_full_n : IN STD_LOGIC;
    dst_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of filtrel_kernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv12_122 : STD_LOGIC_VECTOR (11 downto 0) := "000100100010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_122 : STD_LOGIC_VECTOR (8 downto 0) := "100100010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv18_334 : STD_LOGIC_VECTOR (17 downto 0) := "000000001100110100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv13_122 : STD_LOGIC_VECTOR (12 downto 0) := "0000100100010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond7_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal Line_Flag2_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_2_fu_350_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal count_2_reg_597 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_356_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul_reg_602 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal yi_3_fu_368_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal yi_3_reg_610 : STD_LOGIC_VECTOR (3 downto 0);
    signal xi_3_fu_380_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal i_2_fu_407_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_626 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal Line_Flag2_addr_reg_631 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond6_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_cast_fu_426_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_reg_636 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl9_cast_cast_fu_438_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl9_cast_cast_reg_641 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_18_fu_588_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_reg_654 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_cond7_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_659 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal k_2_fu_480_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_2_reg_663 : STD_LOGIC_VECTOR (3 downto 0);
    signal yi_4_fu_549_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal yi_4_reg_682 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal xi_4_fu_561_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xi_4_reg_690 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal next_mul2_fu_567_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal next_mul2_reg_695 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond3_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buf1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buf1_ce0 : STD_LOGIC;
    signal line_buf1_we0 : STD_LOGIC;
    signal line_buf1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Line_Flag2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal Line_Flag2_ce0 : STD_LOGIC;
    signal Line_Flag2_we0 : STD_LOGIC;
    signal Line_Flag2_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_reg_172 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal exitcond_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal yi_reg_183 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond8_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_194 : STD_LOGIC_VECTOR (11 downto 0);
    signal xi_reg_206 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_217 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_23_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal flag_reg_240 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_flag_be_phi_fu_302_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_temp_1_be_phi_fu_289_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_274 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_3_fu_520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal flag_be_reg_297 : STD_LOGIC_VECTOR (0 downto 0);
    signal yi1_reg_311 : STD_LOGIC_VECTOR (3 downto 0);
    signal xi2_reg_322 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state11 : BOOLEAN;
    signal phi_mul2_reg_333 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_sum1_cast_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_sum_cast_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_cast_fu_386_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_sum1_fu_390_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_fu_418_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl9_fu_430_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_cast8_cast_fu_470_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_fu_486_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_cast_fu_491_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_fu_495_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_61_cast_fu_500_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_sum_fu_504_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of p_sum_fu_504_p2 : signal is "no";
    signal tmp_13_fu_527_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_12_fu_573_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_588_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_588_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_condition_260 : BOOLEAN;

    component TOP_fuct_mul_mul_mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component filtrel_kernel_likbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component filtrel_kernel_LilbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    line_buf1_U : component filtrel_kernel_likbM
    generic map (
        DataWidth => 8,
        AddressRange => 2900,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buf1_address0,
        ce0 => line_buf1_ce0,
        we0 => line_buf1_we0,
        d0 => src_data_stream_V_dout,
        q0 => line_buf1_q0);

    Line_Flag2_U : component filtrel_kernel_LilbW
    generic map (
        DataWidth => 1,
        AddressRange => 29,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Line_Flag2_address0,
        ce0 => Line_Flag2_ce0,
        we0 => Line_Flag2_we0,
        d0 => Line_Flag2_d0,
        q0 => Line_Flag2_q0);

    TOP_fuct_mul_mul_mb6_U99 : component TOP_fuct_mul_mul_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        din0 => tmp_18_fu_588_p0,
        din1 => tmp_18_fu_588_p1,
        dout => tmp_18_fu_588_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond8_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    count_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                count_reg_172 <= count_2_reg_597;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                count_reg_172 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    flag_be_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_19_fu_474_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                flag_be_reg_297 <= ap_const_lv1_0;
            elsif (((icmp_fu_537_p2 = ap_const_lv1_1) and (tmp_23_fu_514_p2 = ap_const_lv1_1) and (tmp_19_reg_659 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                flag_be_reg_297 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    flag_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((tmp_19_reg_659 = ap_const_lv1_0) or ((icmp_fu_537_p2 = ap_const_lv1_1) and (tmp_23_fu_514_p2 = ap_const_lv1_1))))) then 
                flag_reg_240 <= ap_phi_mux_flag_be_phi_fu_302_p4;
            elsif (((exitcond6_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                flag_reg_240 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    i_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_362_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_217 <= ap_const_lv5_0;
            elsif (((or_cond7_fu_454_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_reg_217 <= i_2_reg_626;
            end if; 
        end if;
    end process;

    j_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((tmp_19_reg_659 = ap_const_lv1_0) or ((icmp_fu_537_p2 = ap_const_lv1_1) and (tmp_23_fu_514_p2 = ap_const_lv1_1))))) then 
                j_reg_251 <= j_2_reg_649;
            elsif (((exitcond6_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_251 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    k_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (((tmp_19_reg_659 = ap_const_lv1_1) and (tmp_23_fu_514_p2 = ap_const_lv1_0)) or ((tmp_19_reg_659 = ap_const_lv1_1) and (icmp_fu_537_p2 = ap_const_lv1_0))))) then 
                k_reg_274 <= k_2_reg_663;
            elsif (((or_cond7_fu_454_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_reg_274 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_mul2_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                phi_mul2_reg_333 <= ap_const_lv18_0;
            elsif ((not((((ap_const_lv1_0 = Line_Flag2_q0) and (dst_data_stream_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = Line_Flag2_q0) and (dst_data_stream_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                phi_mul2_reg_333 <= next_mul2_reg_695;
            end if; 
        end if;
    end process;

    phi_mul_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_194 <= ap_const_lv12_0;
            elsif ((not(((exitcond7_fu_374_p2 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_374_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_194 <= next_mul_reg_602;
            end if; 
        end if;
    end process;

    temp_1_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (((tmp_19_reg_659 = ap_const_lv1_1) and (tmp_23_fu_514_p2 = ap_const_lv1_0)) or ((tmp_19_reg_659 = ap_const_lv1_1) and (icmp_fu_537_p2 = ap_const_lv1_0))))) then 
                temp_1_reg_262 <= ap_phi_mux_temp_1_be_phi_fu_289_p4;
            elsif (((or_cond7_fu_454_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                temp_1_reg_262 <= temp_reg_228;
            end if; 
        end if;
    end process;

    temp_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((tmp_19_reg_659 = ap_const_lv1_0) or ((icmp_fu_537_p2 = ap_const_lv1_1) and (tmp_23_fu_514_p2 = ap_const_lv1_1))))) then 
                temp_reg_228 <= temp_1_reg_262;
            elsif (((exitcond6_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                temp_reg_228 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    xi2_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                xi2_reg_322 <= ap_const_lv9_0;
            elsif ((not((((ap_const_lv1_0 = Line_Flag2_q0) and (dst_data_stream_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = Line_Flag2_q0) and (dst_data_stream_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                xi2_reg_322 <= xi_4_reg_690;
            end if; 
        end if;
    end process;

    xi_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_362_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                xi_reg_206 <= ap_const_lv9_0;
            elsif ((not(((exitcond7_fu_374_p2 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_374_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                xi_reg_206 <= xi_3_fu_380_p2;
            end if; 
        end if;
    end process;

    yi1_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_401_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                yi1_reg_311 <= ap_const_lv4_0;
            elsif (((exitcond3_fu_555_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                yi1_reg_311 <= yi_4_reg_682;
            end if; 
        end if;
    end process;

    yi_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                yi_reg_183 <= ap_const_lv4_0;
            elsif ((not(((exitcond7_fu_374_p2 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_374_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                yi_reg_183 <= yi_3_reg_610;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                Line_Flag2_addr_reg_631 <= tmp_s_fu_413_p1(5 - 1 downto 0);
                    p_shl9_cast_cast_reg_641(5 downto 1) <= p_shl9_cast_cast_fu_438_p1(5 downto 1);
                    p_shl_cast_reg_636(7 downto 3) <= p_shl_cast_fu_426_p1(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                count_2_reg_597 <= count_2_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_2_reg_626 <= i_2_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_2_reg_649 <= j_2_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                k_2_reg_663 <= k_2_fu_480_p2;
                tmp_19_reg_659 <= tmp_19_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_555_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                next_mul2_reg_695 <= next_mul2_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                next_mul_reg_602 <= next_mul_fu_356_p2;
                yi_3_reg_610 <= yi_3_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond7_fu_454_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_18_reg_654 <= tmp_18_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                xi_4_reg_690 <= xi_4_fu_561_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                yi_4_reg_682 <= yi_4_fu_549_p2;
            end if;
        end if;
    end process;
    p_shl_cast_reg_636(2 downto 0) <= "000";
    p_shl_cast_reg_636(8) <= '0';
    p_shl9_cast_cast_reg_641(0) <= '0';
    p_shl9_cast_cast_reg_641(6) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_CS_fsm_state4, exitcond7_fu_374_p2, ap_CS_fsm_state11, Line_Flag2_q0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, exitcond6_fu_401_p2, ap_CS_fsm_state6, or_cond7_fu_454_p2, tmp_19_reg_659, ap_CS_fsm_state9, ap_CS_fsm_state10, exitcond3_fu_555_p2, exitcond_fu_543_p2, exitcond8_fu_344_p2, exitcond4_fu_362_p2, ap_CS_fsm_state8, tmp_23_fu_514_p2, icmp_fu_537_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond8_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond4_fu_362_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((exitcond7_fu_374_p2 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_374_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((exitcond7_fu_374_p2 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_374_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond6_fu_401_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((or_cond7_fu_454_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((tmp_19_reg_659 = ap_const_lv1_0) or ((icmp_fu_537_p2 = ap_const_lv1_1) and (tmp_23_fu_514_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state9 => 
                if (((exitcond_fu_543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((exitcond3_fu_555_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not((((ap_const_lv1_0 = Line_Flag2_q0) and (dst_data_stream_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = Line_Flag2_q0) and (dst_data_stream_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    Line_Flag2_address0_assign_proc : process(ap_CS_fsm_state5, Line_Flag2_addr_reg_631, ap_CS_fsm_state10, ap_CS_fsm_state8, tmp_s_fu_413_p1, tmp_20_fu_583_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Line_Flag2_address0 <= tmp_20_fu_583_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Line_Flag2_address0 <= Line_Flag2_addr_reg_631;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Line_Flag2_address0 <= tmp_s_fu_413_p1(5 - 1 downto 0);
        else 
            Line_Flag2_address0 <= "XXXXX";
        end if; 
    end process;


    Line_Flag2_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            Line_Flag2_ce0 <= ap_const_logic_1;
        else 
            Line_Flag2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Line_Flag2_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Line_Flag2_d0 <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Line_Flag2_d0 <= ap_const_lv1_0;
        else 
            Line_Flag2_d0 <= "X";
        end if; 
    end process;


    Line_Flag2_we0_assign_proc : process(ap_CS_fsm_state5, exitcond6_fu_401_p2, tmp_19_reg_659, ap_CS_fsm_state8, tmp_23_fu_514_p2, icmp_fu_537_p2)
    begin
        if ((((exitcond6_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_fu_537_p2 = ap_const_lv1_1) and (tmp_23_fu_514_p2 = ap_const_lv1_1) and (tmp_19_reg_659 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            Line_Flag2_we0 <= ap_const_logic_1;
        else 
            Line_Flag2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state11_assign_proc : process(dst_data_stream_V_full_n, Line_Flag2_q0)
    begin
                ap_block_state11 <= (((ap_const_lv1_0 = Line_Flag2_q0) and (dst_data_stream_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = Line_Flag2_q0) and (dst_data_stream_V_full_n = ap_const_logic_0)));
    end process;


    ap_block_state4_assign_proc : process(src_data_stream_V_empty_n, exitcond7_fu_374_p2)
    begin
                ap_block_state4 <= ((exitcond7_fu_374_p2 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0));
    end process;


    ap_condition_260_assign_proc : process(dst_data_stream_V_full_n, ap_CS_fsm_state11, Line_Flag2_q0)
    begin
                ap_condition_260 <= (not((((ap_const_lv1_0 = Line_Flag2_q0) and (dst_data_stream_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = Line_Flag2_q0) and (dst_data_stream_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state11));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond8_fu_344_p2)
    begin
        if (((exitcond8_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_flag_be_phi_fu_302_p4_assign_proc : process(tmp_19_reg_659, ap_CS_fsm_state8, tmp_23_fu_514_p2, icmp_fu_537_p2, flag_be_reg_297)
    begin
        if (((icmp_fu_537_p2 = ap_const_lv1_1) and (tmp_23_fu_514_p2 = ap_const_lv1_1) and (tmp_19_reg_659 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_phi_mux_flag_be_phi_fu_302_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_flag_be_phi_fu_302_p4 <= flag_be_reg_297;
        end if; 
    end process;


    ap_phi_mux_temp_1_be_phi_fu_289_p4_assign_proc : process(tmp_19_reg_659, temp_1_reg_262, ap_CS_fsm_state8, tmp_23_fu_514_p2, icmp_fu_537_p2, temp_3_fu_520_p2)
    begin
        if (((tmp_19_reg_659 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
            if (((tmp_23_fu_514_p2 = ap_const_lv1_1) and (icmp_fu_537_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_temp_1_be_phi_fu_289_p4 <= temp_1_reg_262;
            elsif ((tmp_23_fu_514_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_temp_1_be_phi_fu_289_p4 <= temp_3_fu_520_p2;
            else 
                ap_phi_mux_temp_1_be_phi_fu_289_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_temp_1_be_phi_fu_289_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond8_fu_344_p2)
    begin
        if (((exitcond8_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    count_2_fu_350_p2 <= std_logic_vector(unsigned(count_reg_172) + unsigned(ap_const_lv5_1));

    dst_data_stream_V_blk_n_assign_proc : process(dst_data_stream_V_full_n, ap_CS_fsm_state11, Line_Flag2_q0)
    begin
        if ((((ap_const_lv1_0 = Line_Flag2_q0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = Line_Flag2_q0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            dst_data_stream_V_blk_n <= dst_data_stream_V_full_n;
        else 
            dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dst_data_stream_V_din_assign_proc : process(Line_Flag2_q0, ap_condition_260)
    begin
        if ((ap_const_boolean_1 = ap_condition_260)) then
            if ((ap_const_lv1_1 = Line_Flag2_q0)) then 
                dst_data_stream_V_din <= ap_const_lv8_0;
            elsif ((ap_const_lv1_0 = Line_Flag2_q0)) then 
                dst_data_stream_V_din <= ap_const_lv8_FF;
            else 
                dst_data_stream_V_din <= "XXXXXXXX";
            end if;
        else 
            dst_data_stream_V_din <= "XXXXXXXX";
        end if; 
    end process;


    dst_data_stream_V_write_assign_proc : process(dst_data_stream_V_full_n, ap_CS_fsm_state11, Line_Flag2_q0)
    begin
        if (((not((((ap_const_lv1_0 = Line_Flag2_q0) and (dst_data_stream_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = Line_Flag2_q0) and (dst_data_stream_V_full_n = ap_const_logic_0)))) and (ap_const_lv1_0 = Line_Flag2_q0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not((((ap_const_lv1_0 = Line_Flag2_q0) and (dst_data_stream_V_full_n = ap_const_logic_0)) or ((ap_const_lv1_1 = Line_Flag2_q0) and (dst_data_stream_V_full_n = ap_const_logic_0)))) and (ap_const_lv1_1 = Line_Flag2_q0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            dst_data_stream_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_555_p2 <= "1" when (xi2_reg_322 = ap_const_lv9_122) else "0";
    exitcond4_fu_362_p2 <= "1" when (yi_reg_183 = ap_const_lv4_A) else "0";
    exitcond6_fu_401_p2 <= "1" when (i_reg_217 = ap_const_lv5_1D) else "0";
    exitcond7_fu_374_p2 <= "1" when (xi_reg_206 = ap_const_lv9_122) else "0";
    exitcond8_fu_344_p2 <= "1" when (count_reg_172 = ap_const_lv5_12) else "0";
    exitcond_fu_543_p2 <= "1" when (yi1_reg_311 = ap_const_lv4_A) else "0";
    i_2_fu_407_p2 <= std_logic_vector(unsigned(i_reg_217) + unsigned(ap_const_lv5_1));
    icmp_fu_537_p2 <= "1" when (signed(tmp_13_fu_527_p4) > signed(ap_const_lv28_0)) else "0";
    j_2_fu_460_p2 <= std_logic_vector(unsigned(j_reg_251) + unsigned(ap_const_lv32_1));
    k_2_fu_480_p2 <= std_logic_vector(unsigned(k_reg_274) + unsigned(ap_const_lv4_1));
    k_cast8_cast_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_274),7));

    line_buf1_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, p_sum1_cast_fu_396_p1, p_sum_cast_fu_509_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buf1_address0 <= p_sum_cast_fu_509_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            line_buf1_address0 <= p_sum1_cast_fu_396_p1(12 - 1 downto 0);
        else 
            line_buf1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    line_buf1_ce0_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_state4, exitcond7_fu_374_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (not(((exitcond7_fu_374_p2 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            line_buf1_ce0 <= ap_const_logic_1;
        else 
            line_buf1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buf1_we0_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_state4, exitcond7_fu_374_p2)
    begin
        if ((not(((exitcond7_fu_374_p2 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_374_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            line_buf1_we0 <= ap_const_logic_1;
        else 
            line_buf1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul2_fu_567_p2 <= std_logic_vector(unsigned(phi_mul2_reg_333) + unsigned(ap_const_lv18_334));
    next_mul_fu_356_p2 <= std_logic_vector(unsigned(phi_mul_reg_194) + unsigned(ap_const_lv12_122));
    or_cond7_fu_454_p2 <= (tmp_17_fu_448_p2 and tmp_16_fu_442_p2);
    p_shl9_cast_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_430_p3),7));
    p_shl9_fu_430_p3 <= (i_reg_217 & ap_const_lv1_0);
    p_shl_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_418_p3),9));
    p_shl_fu_418_p3 <= (i_reg_217 & ap_const_lv3_0);
    p_sum1_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum1_fu_390_p2),64));
    p_sum1_fu_390_p2 <= std_logic_vector(unsigned(phi_mul_reg_194) + unsigned(tmp_54_cast_fu_386_p1));
        p_sum_cast_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_sum_fu_504_p2),64));

    p_sum_fu_504_p2 <= std_logic_vector(signed(tmp_18_reg_654) + signed(tmp_61_cast_fu_500_p1));

    src_data_stream_V_blk_n_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_state4, exitcond7_fu_374_p2)
    begin
        if (((exitcond7_fu_374_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            src_data_stream_V_blk_n <= src_data_stream_V_empty_n;
        else 
            src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_V_read_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_state4, exitcond7_fu_374_p2)
    begin
        if ((not(((exitcond7_fu_374_p2 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (exitcond7_fu_374_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            src_data_stream_V_read <= ap_const_logic_1;
        else 
            src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    temp_3_fu_520_p2 <= std_logic_vector(unsigned(temp_1_reg_262) + unsigned(ap_const_lv32_1));
    tmp1_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_486_p2),9));
    tmp1_fu_486_p2 <= std_logic_vector(unsigned(p_shl9_cast_cast_reg_641) + unsigned(k_cast8_cast_fu_470_p1));
    tmp_12_fu_573_p4 <= phi_mul2_reg_333(17 downto 13);
    tmp_13_fu_527_p4 <= temp_1_reg_262(31 downto 4);
    tmp_16_fu_442_p2 <= "1" when (signed(j_reg_251) < signed(ap_const_lv32_A)) else "0";
    tmp_17_fu_448_p2 <= (flag_reg_240 xor ap_const_lv1_1);
    tmp_18_fu_588_p0 <= ap_const_lv13_122(10 - 1 downto 0);
    tmp_18_fu_588_p1 <= j_reg_251(13 - 1 downto 0);
    tmp_19_fu_474_p2 <= "1" when (unsigned(k_reg_274) < unsigned(ap_const_lv4_A)) else "0";
    tmp_20_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_573_p4),64));
    tmp_22_fu_495_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_491_p1) + unsigned(p_shl_cast_reg_636));
    tmp_23_fu_514_p2 <= "1" when (line_buf1_q0 = ap_const_lv8_0) else "0";
    tmp_54_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xi_reg_206),12));
    tmp_61_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_495_p2),13));
    tmp_s_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_217),64));
    xi_3_fu_380_p2 <= std_logic_vector(unsigned(xi_reg_206) + unsigned(ap_const_lv9_1));
    xi_4_fu_561_p2 <= std_logic_vector(unsigned(xi2_reg_322) + unsigned(ap_const_lv9_1));
    yi_3_fu_368_p2 <= std_logic_vector(unsigned(yi_reg_183) + unsigned(ap_const_lv4_1));
    yi_4_fu_549_p2 <= std_logic_vector(unsigned(yi1_reg_311) + unsigned(ap_const_lv4_1));
end behav;
