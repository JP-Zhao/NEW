// ==============================================================
// File generated on Sat Jun 04 16:23:53 +0800 2022
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
// SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
// IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __SeekPoint_SJLB_H__
#define __SeekPoint_SJLB_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct SeekPoint_SJLB_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 100;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(SeekPoint_SJLB_ram) {
        ram[0] = "0b00111111010100001001000110111011";
        ram[1] = "0b00111111011001111110000111111011";
        ram[2] = "0b00111110000000100000100011010101";
        ram[3] = "0b00111111011010011101001100000000";
        ram[4] = "0b00111111001000011110001001001100";
        ram[5] = "0b00111101110001111100001101000100";
        ram[6] = "0b00111110100011101001011101010010";
        ram[7] = "0b00111111000011000000000001101101";
        ram[8] = "0b00111111011101010001111100101011";
        ram[9] = "0b00111111011101110000001011101111";
        ram[10] = "0b00111110001000010110010101010011";
        ram[11] = "0b00111111011110000111100011000101";
        ram[12] = "0b00111111011101010000100011100101";
        ram[13] = "0b00111110111110001000001100101000";
        ram[14] = "0b00111111010011001101111100101110";
        ram[15] = "0b00111110000100010100101010100111";
        ram[16] = "0b00111110110101111111000100011000";
        ram[17] = "0b00111111011010100110110110100101";
        ram[18] = "0b00111111010010101100111000011001";
        ram[19] = "0b00111111011101011010000101001100";
        ram[20] = "0b00111111001001111101111010011111";
        ram[21] = "0b00111101000100100100011001101001";
        ram[22] = "0b00111111010110010110000010001010";
        ram[23] = "0b00111111011011110001101000101110";
        ram[24] = "0b00111111001011011100000110010110";
        ram[25] = "0b00111111010000011111101101000010";
        ram[26] = "0b00111111001111100011110111101110";
        ram[27] = "0b00111110110010001101000111111011";
        ram[28] = "0b00111111001001111100110101100110";
        ram[29] = "0b00111110001011110100101110010000";
        ram[30] = "0b00111111001101001011111101110000";
        ram[31] = "0b00111101000000100110001100101001";
        ram[32] = "0b00111110100011011100100011011001";
        ram[33] = "0b00111101001111010001111000110110";
        ram[34] = "0b00111101110001101110110100000111";
        ram[35] = "0b00111111010100101100111000100010";
        ram[36] = "0b00111111001100011110000001001010";
        ram[37] = "0b00111110101000100101101011011101";
        ram[38] = "0b00111111011100110100000111000001";
        ram[39] = "0b00111101000011010001011101010101";
        ram[40] = "0b00111110111000001010001100011010";
        ram[41] = "0b00111110110000110101101110100001";
        ram[42] = "0b00111111010000111111100011101001";
        ram[43] = "0b00111111010010111001001000111001";
        ram[44] = "0b00111110001111110101101110001000";
        ram[45] = "0b00111110111110101100001001100110";
        ram[46] = "0b00111110111001000010001111100000";
        ram[47] = "0b00111111001001010111010011000101";
        ram[48] = "0b00111111001101011001100011101111";
        ram[49] = "0b00111111010000010011001100100101";
        ram[50] = "0b00111110100011010101001100101001";
        ram[51] = "0b00111111001011100000000011111111";
        ram[52] = "0b00111111001001111011010010000001";
        ram[53] = "0b00111110001001101000001110110001";
        ram[54] = "0b00111101111100111011010100001110";
        ram[55] = "0b00111110111111110010100110010011";
        ram[56] = "0b00111111011101011011000111001000";
        ram[57] = "0b00111110101011100100011100001010";
        ram[58] = "0b00111111000101011101010000011011";
        ram[59] = "0b00111110011001010010111011110101";
        ram[60] = "0b00111111010000000101001100001010";
        ram[61] = "0b00111110100000101001101111010100";
        ram[62] = "0b00111111000000011000011001100111";
        ram[63] = "0b00111111001100101111011010110001";
        ram[64] = "0b00111111011001000001001000111100";
        ram[65] = "0b00111111011101011001010000011111";
        ram[66] = "0b00111111000011000001011001010001";
        ram[67] = "0b00111110000011011111001110010001";
        ram[68] = "0b00111110000110001110000010000111";
        ram[69] = "0b00111110100000111101100000011111";
        ram[70] = "0b00111111010101110011100100111111";
        ram[71] = "0b00111110100000100011000101000110";
        ram[72] = "0b00111111010100000111010011111000";
        ram[73] = "0b00111110011110010101111010011100";
        ram[74] = "0b00111111011011011110010000111001";
        ram[75] = "0b00111110101100110011000100010010";
        ram[76] = "0b00111110010010010101000001000100";
        ram[77] = "0b00111110100000001000111000010000";
        ram[78] = "0b00111111000111011011010100011011";
        ram[79] = "0b00111110111100100101001011101010";
        ram[80] = "0b00111110101101000000110010110111";
        ram[81] = "0b00111111010101001011000100101111";
        ram[82] = "0b00111111000101011101001111011110";
        ram[83] = "0b00111111000011001011101010110000";
        ram[84] = "0b00111111011010101100110100110100";
        ram[85] = "0b00111110100100100101100101111110";
        ram[86] = "0b00111111010000011101011111100000";
        ram[87] = "0b00111111010000001111010001100100";
        ram[88] = "0b00111110110000101100100111001100";
        ram[89] = "0b00111111000100010101110011000010";
        ram[90] = "0b00111101100110110101100101111110";
        ram[91] = "0b00111101010111001111101011001101";
        ram[92] = "0b00111111000001111110001001011001";
        ram[93] = "0b00111111010001110111011110000001";
        ram[94] = "0b00111111011011110001101101010011";
        ram[95] = "0b00111110000001010000011000100010";
        ram[96] = "0b00111111000100011001111001101101";
        ram[97] = "0b00111110111100000101001111111000";
        ram[98] = "0b00111100010000110000000011100110";
        ram[99] = "0b00111110101011001001101101010111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(SeekPoint_SJLB) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 100;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


SeekPoint_SJLB_ram* meminst;


SC_CTOR(SeekPoint_SJLB) {
meminst = new SeekPoint_SJLB_ram("SeekPoint_SJLB_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~SeekPoint_SJLB() {
    delete meminst;
}


};//endmodule
#endif
