// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ListInsert (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Data_address0,
        Data_ce0,
        Data_we0,
        Data_d0,
        Data_q0,
        i,
        e,
        length_r
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] Data_address0;
output   Data_ce0;
output   Data_we0;
output  [31:0] Data_d0;
input  [31:0] Data_q0;
input  [31:0] i;
input  [8:0] e;
input  [31:0] length_r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] Data_address0;
reg Data_ce0;
reg Data_we0;
reg[31:0] Data_d0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] e_cast_fu_76_p1;
reg   [31:0] e_cast_reg_146;
wire   [0:0] tmp_fu_80_p2;
reg   [0:0] tmp_reg_151;
wire   [0:0] tmp_62_fu_92_p2;
reg   [0:0] tmp_62_reg_155;
wire   [0:0] tmp_63_fu_98_p2;
reg   [0:0] tmp_63_reg_159;
reg   [12:0] Data_addr_reg_163;
wire   [31:0] j_6_fu_114_p2;
reg   [31:0] j_6_reg_171;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_65_fu_109_p2;
reg   [31:0] j_reg_67;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_64_fu_104_p1;
wire   [63:0] tmp_68_fu_120_p1;
wire   [63:0] tmp_67_fu_130_p1;
wire   [31:0] tmp_s_fu_86_p2;
wire   [31:0] tmp_66_fu_125_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (tmp_63_fu_98_p2 == 1'd1) & (tmp_62_fu_92_p2 == 1'd0) & (tmp_fu_80_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_67 <= length_r;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_67 <= j_6_reg_171;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (tmp_63_fu_98_p2 == 1'd1) & (tmp_62_fu_92_p2 == 1'd0) & (tmp_fu_80_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        Data_addr_reg_163 <= tmp_64_fu_104_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        e_cast_reg_146[8 : 0] <= e_cast_fu_76_p1[8 : 0];
        tmp_reg_151 <= tmp_fu_80_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_63_reg_159 == 1'd1) & (tmp_65_fu_109_p2 == 1'd0) & (tmp_62_reg_155 == 1'd0) & (tmp_reg_151 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_6_reg_171 <= j_6_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (tmp_fu_80_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_62_reg_155 <= tmp_62_fu_92_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (tmp_62_fu_92_p2 == 1'd0) & (tmp_fu_80_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_63_reg_159 <= tmp_63_fu_98_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Data_address0 = Data_addr_reg_163;
    end else if (((tmp_65_fu_109_p2 == 1'd1) & (tmp_63_reg_159 == 1'd1) & (tmp_62_reg_155 == 1'd0) & (tmp_reg_151 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Data_address0 = tmp_67_fu_130_p1;
    end else if (((tmp_63_reg_159 == 1'd1) & (tmp_65_fu_109_p2 == 1'd0) & (tmp_62_reg_155 == 1'd0) & (tmp_reg_151 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Data_address0 = tmp_68_fu_120_p1;
    end else begin
        Data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((tmp_65_fu_109_p2 == 1'd1) & (tmp_63_reg_159 == 1'd1) & (tmp_62_reg_155 == 1'd0) & (tmp_reg_151 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_63_reg_159 == 1'd1) & (tmp_65_fu_109_p2 == 1'd0) & (tmp_62_reg_155 == 1'd0) & (tmp_reg_151 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        Data_ce0 = 1'b1;
    end else begin
        Data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Data_d0 = Data_q0;
    end else if (((tmp_65_fu_109_p2 == 1'd1) & (tmp_63_reg_159 == 1'd1) & (tmp_62_reg_155 == 1'd0) & (tmp_reg_151 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Data_d0 = e_cast_reg_146;
    end else begin
        Data_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((tmp_65_fu_109_p2 == 1'd1) & (tmp_63_reg_159 == 1'd1) & (tmp_62_reg_155 == 1'd0) & (tmp_reg_151 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        Data_we0 = 1'b1;
    end else begin
        Data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ((tmp_reg_151 == 1'd1) | ((tmp_62_reg_155 == 1'd1) | ((tmp_65_fu_109_p2 == 1'd1) | (tmp_63_reg_159 == 1'd0))))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((tmp_reg_151 == 1'd1) | ((tmp_62_reg_155 == 1'd1) | ((tmp_65_fu_109_p2 == 1'd1) | (tmp_63_reg_159 == 1'd0)))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((tmp_reg_151 == 1'd1) | ((tmp_62_reg_155 == 1'd1) | ((tmp_65_fu_109_p2 == 1'd1) | (tmp_63_reg_159 == 1'd0)))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign e_cast_fu_76_p1 = e;

assign j_6_fu_114_p2 = ($signed(j_reg_67) + $signed(32'd4294967295));

assign tmp_62_fu_92_p2 = (($signed(tmp_s_fu_86_p2) < $signed(i)) ? 1'b1 : 1'b0);

assign tmp_63_fu_98_p2 = (($signed(length_r) < $signed(32'd5000)) ? 1'b1 : 1'b0);

assign tmp_64_fu_104_p1 = i;

assign tmp_65_fu_109_p2 = (($signed(j_reg_67) < $signed(i)) ? 1'b1 : 1'b0);

assign tmp_66_fu_125_p2 = ($signed(i) + $signed(32'd4294967295));

assign tmp_67_fu_130_p1 = tmp_66_fu_125_p2;

assign tmp_68_fu_120_p1 = j_6_fu_114_p2;

assign tmp_fu_80_p2 = (($signed(i) < $signed(32'd1)) ? 1'b1 : 1'b0);

assign tmp_s_fu_86_p2 = (length_r + 32'd1);

always @ (posedge ap_clk) begin
    e_cast_reg_146[31:9] <= 23'b00000000000000000000000;
end

endmodule //ListInsert
